*Lập trình máy chủ - máy khách (Client-Server Programming):

Bạn cần xây dựng một máy chủ (server) để quản lý cuộc đua vịt và cho phép các máy khách (clients) kết nối tới.
Máy chủ sẽ lắng nghe các kết nối từ nhiều máy khách thông qua một địa chỉ IP và một cổng (port) cụ thể.
Các máy khách sẽ gửi yêu cầu đến máy chủ để tham gia cuộc đua và đặt cược vào con vịt mà họ muốn.


*Kết nối qua địa chỉ IP:

Máy chủ cần được triển khai trên một địa chỉ IP tĩnh hoặc sử dụng kỹ thuật DNS để máy khách có thể dễ dàng kết nối tới.
Bạn có thể dùng các thư viện hỗ trợ lập trình mạng như Socket trong Java hoặc các ngôn ngữ khác để thiết lập kết nối giữa máy chủ và máy khách.

*Xử lý đa luồng (Multithreading):

Mỗi con vịt trong cuộc đua sẽ được đại diện bởi một luồng (thread). Luồng này sẽ di chuyển con vịt theo thời gian.
Bạn có thể dùng một vòng lặp trong luồng để cập nhật vị trí của con vịt và gửi thông tin này cho máy khách.

*Đồng bộ hóa và xử lý trạng thái cuộc đua:

Máy chủ cần đồng bộ hóa dữ liệu từ các luồng để đảm bảo rằng trạng thái của cuộc đua được cập nhật chính xác và gửi thông tin cho tất cả các máy khách trong thời gian thực.
Các tình huống như vịt về đích, người chơi chọn vịt, và kết thúc cuộc đua cần được xử lý một cách đồng bộ.

*Ngoài ra, các kỹ thuật như WebSocket có thể được sử dụng nếu bạn muốn phát triển ứng dụng này trên nền tảng web để giao tiếp trong thời gian thực.


Dựa vào những yêu cầu và scope đã đặt ra thì ta dùng lập trình multicast chọn 1 địa chỉ IP lớp D, dùng kỹ thuật UDP để tạo phòng cho người chơi trong thời gian thực. 


Vậy thì điều này dẫn tới việc không thể truy cập phòng bằng lập trình web thông thường vì nó dùng http protocol trong khi mình dùng UDP, muốn truy cập thì dùng mã code trong Intelij hoặc tiện dự án thì tạo 1 app desktop riêng biệt như ptit code client để truy cập nó dựa trên udp. 

Tuy nhiên điều này có tác động đến Front-end. Hiện tại t đang dùng vite + vue 3 dùng cho web, nên nó sẽ cần tích hợp web với app như electron