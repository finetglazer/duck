1. Build up another path with different handle socket for better code control.

2. Constraints: 
* Time: 
For each race. We will have a certain length for the race, and if any ducks comes to race first, then it will won. 
For betting the candidate. -> 30s

* Point reward
+ Get all betting point in the sum pool
+ Any candidates can be betted by many players
+ Reward to every winner with the total value divided with the proportion
+ If no ones win, total pool will be let for the next match. 

Example:
Total bet pool: 1000 points
Player A bet 300 points on the winning candidate.
Player B bet 100 points on the same winning candidate.
Total winning bets: 400 points (300 from Player A, 100 from Player B)
The rewards would be calculated as:

Player A's reward: 
300/400×1000=750
400/300×1000=750 points

Player B's reward: 
100/400×1000=250
400/100×1000=250 points

* Candidates
Number: 5


*** Code requirement:
1. Just different handle socket and a new socket
2. About time constraint
We use BE handle time logic: countdown logic
Front-end display the remaining time after receiving from BE
3. System flow
FE: Choosing the candidate and set the point to bet ->
BE: At the betting time, Create a sum variable -> Time start, then all duck candidates (threads) coming -> what duck comes to the end points first will win -> Update points -> Send the players win and points for the FE displaying. 

4. Using separate thread for each candidate. Set up the fixed length of race, then the first duck comes will be the winning one

*** Code specific: 
1. Using Threads for each candidate:
+ Proceed with using one thread per candidate.
+ Keep the thread logic straightforward to minimize complexity.
+ Implement proper synchronization to ensure thread safety.

2. Pre-Determining the Winner and Simulating the Race
+ Proceed with pre-determining the winner.
+ Use threads to simulate the race progress in a way that reflects the pre-selected outcome.


3. Handling Integer Points for Betting and Rewards

+ Use long data type for point values to handle larger numbers and prevent overflow.
+ Carefully perform arithmetic operations to maintain accuracy.
+ Implement logic to handle remainders in a way that fits your game's rules.
Using bet class: playerId, candidateId, amount. Use Map to store

4. Communication through protocols

timer, remaining time
raceStart
raceUpdate, positions: "1": 50, "2": 45, ...
raceResult, winner, rewards: [{"playerId": "abc123", "reward": 750}, {"playerId": "def456", "reward": 250}]

5. Error handling and validation
Input validation:
+  Betamount: > 0 and the player has enough points
+ Candidate Selection: verify the candidateID is within the valid range(1-5)

6. Add loggin and monitoring


*** Cơ chế giải đấu: 
Vào 1 phòng, cứ mỗi round phải đặt khoản tiền lót tăng dần lên để tăng áp lực mỗi vòng
Rời đi thì tiền chia đều cho người còn lại 
Ai tồn tại cuối cùng là người chiến thắng. 